소켓생성 
ip주소, port변호 할당바인드함수 주소부여
리슨함수로 연결 대기
accept함수로 수락

프로토콜이란 ?
- 개념적으로 약속의 의미를 담고 있다.
- 컴푸터 상호간의 데이터 송수신에  필요한 통신규약.
- 소켓을 생성할 때 기본적인 프로토콜을 지정해야한다. 

0~254까지.0~254까지
127.0.0.1 ipv4 . 네개로 ip주소로 구분하겠다.


소켓 타입
데이터 전송박ㅇ식을 의미함
소켓이 생성될 때 소켓의 타입도 결정되어야한다.

프로토콜 체계 PF_INET

두 타입의 소켓
연결지향형 소켓의 데이터 전송특성
-컨베이어 벨트처럼
-중간에 데이터 소멸되지 않은닫.
-전송 순서대로 데이터가 수신된다.
-데이터의 경계가 존재하지 않는다.  
-소켓 대 소켓의 연결은 반드시 1대 1의 구조


비연결지향형 소켓의 데이터 전송 특성
-전송순성 상관없이 빠른속도의 전송을 지향
-데이터 손실 및 파손의 우려 있따.
-데이터의 경계가 존재한다.
-한번에 전송할 수 있는 제이터의 크기가 제한된다.


인터넷 주소 
라우터
p.64

cpu에 따라 달라지는 정수의 표현
메모리 주소에 저장하는 방식이 달라진다. 
바이트 순서와 네트워크 바이트 순서
 (빅 엔디안)Big Endian
    - 상위 바이트의 값을 작은 번지수에 저장
리틀 엔디안 (little Endian)
    - 상위 바이트의 값을 큰 번지수에 저장
호스트 바이트 순서
    - cpu별 데이터 저장방식을 의미함
네트워크 바이트 순서
    - 통일된 데이터 송수신 기준을 의미함
    - 빅 엔디안이 기준이다.

바이트 순서의 변환
unsigned short

그래서 htons
ntohs
htonl
이런거 쓰는거임
#include<arpa/inet.h>
in_addr_t inet_addr(const char * string);
성공시 빅엔디안으로 변환된 32비트정수값 실패시 INADDR_NONE 반환

inet_aton
아스키를 네트워크로 변환

inet_ntoa 
네트워크쇼트를 아스키로

인터넷 주소의 초기화

소켓생성 프로토콜설정



tcp 소켓에 존재하는 입출력 버퍼

read()는 입력버퍼에 있는거를 읽어 들인다.   
wirte()는 출력버퍼에 있는거를 읽어서 상대방 입력 버퍼로 전송하낟. 

버퍼가 있으면 유기적으로 작동할 수 있기 때문에 많이 사용함 하지만 단계가 하나 추가되는것이기 때문에 좀 더 느리다. 
입출력 버퍼는 소켓생성시 자동으로 생성된다.
소켓을 닫아도 출력버퍼에 남아있는 데이터는 계쏙해서 전송이 이루어진다. 
소켓을 닫으면 입력 버퍼에 있는 데이터는 소멸되어버린다. 


일방적인 연결 종료의 문제점

close 및 closesocket 함수의 기능

half-close
입출력 스트림을 반만 종료하자. 
#include < sys/socket.h>
int shutdown(int sock, int howto); 성공시 0, 실패시 -1 반환
    sock 종료할 소켓의 파일 디스크립터 전달.
    howto 종료방법에 대한 정보 전달
    SHUT_RD 입력스트림 종료
    SHUT_WR 출력스트림 종료
    SHUT_RDWR 입출력 스트림종료
반반 나눠서 종료하자 그래서 전송이 마무리되도록하자.

HALF-CLOSE 가 필요한 이유
수신자가 파일을 전송받을 때 언제까지 전송이 되는지를 알수 없기 때문에
EOF를 보내서 파일이 끝났고 전송이 완료된걸 알아야한다. 하지만 CLOSE()함수를 사용하면
입출력 스티림이 종료가 되고 

thank you


도메인 이름
서버의 주소를 ip로 변환되어야 접속이 가능하다.
dns 도메인 이름을 ip로 변환해주는 서버 
dns는 일종의 분산 데이터베이스 시스템이다.

#include<netdb.h>

struct hostent * gethostaddr
