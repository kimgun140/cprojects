HAVING{조건식}
:집께함수의 조건을 줄 때 사용하는 식. GROUP BY 문 뒤에 붙어 작동한다.
쉽게 생각해서 전체를 대상으로 할 때는 WHERE, GROUP 단위 혹은 기준으로 할 때 사용한다.
WHERE절에는 집계함수가 들어가면 작동안함 WHERE에서 먼저 조건걸어서 걸러버리기 때무넹 그룹이 지어지니까 
집계함수가 작동하는데 요소가 부족해서 작동을 안하는 경우가 생긴다. 


COUNT()
COUNT는 특정 조건을 만족하는 행의 개수를 세는 함수입니다.

employees 테이블의 전체 행 개수를 구합니다. 의미 상 전체 직원 수를 구하는 것입니다.


JOIN 
관계형 DB의 TABLE간의 관계를 통해서 새로운 TABLE을 만드는 연산
JOIN을 하기 위해서는 TABLE간의 관계는 PRIMARY KEY 와 FOREIGNKEY와 같은 관계가 존재해야한다.
실제 꼭 프라이머리키와 외래키가 아니더라도 JOIN은 가능하다. 이 두 키를 두면 생기는 장점은 이러한 관계 형성에 생길 오류를 
사전에 막을 수 있다는 점이 있다.
데이터 타입의 경우에는 정확히 일치하는 정도는 아니지만 어느정도도 허용된다.(실제 값 자체로 관계 형성)


JOIN의 종류
OUTER JOIN
:합집합, 기준에 따라 값이 달라질 수 있다.
두테이블이 관계를 형성한 속성을 기준으로 둘을 합한 결과를 내놓는다.
이를 구분하기 위하여 LEFT,RIGHT,FULL이 존재한다.

INNER JOIN
:교집합 항상 겹치는 것에 대한 결과를 가진다.
두 테이블이 관계를 형성한 속성을 기준으로 둘에게 모두 존재하는 경우에만 결과를 내놓는다.

CROSS JOIN
:곱집함, 합집합 이상의 모든 경우의 조합을 보여준다.

NATURAL JOIN
:교집합과 같지만, 공통이 된 COLUMN은 한번만 출력된다. 

FULL(OUTER) JOIN 
:RIGHT 와 LEFT를 합친 JOIN

INNER JOIN 
: 둘 모두가 공통적을 가진 부분만 합친 JOIN(교집합?)

NATURAL JOIN
:INNER JOIN 과 같으나 자연스럽게 (같은 칼럼명) JOIN한다. 


SUB QUERY
:하나의 쿼리 안에 또 다른 쿼리를 가리키는 것으로 , 특정 데이터를 얻기 위해서 하나의 쿼리를 한번 더 거치는 것을 가리킨다.
서브 쿼리는 괄호를 이용하여 작성하낟.
오더 바이문은 사용할 수 없다.
단일 행 혹은 복수의 행, 더불어 복수의 속성과도 사용할 수 있으나 가능한

SELECT *FROM EMP WHERE SAL = (SELECT MAX(SAL) FROM EMP);
EMP에서 SAL이 가장 큰 사람뽑기

SELECT * FROM EMP WHERE DEPTNO = (SELECT DEPTNO FROM EMP WHERE ENAME = 'ALLEN');
ALLEN이랑 같은 DEPTNO을 가진사람 뽑기


SUB QUERY 
: 서브 쿼리는 = 이 가리키는 대상의 조건을 설정해준 다는 의미 




