벡터란
1. 어떤 자료형도 넣을 수 있는 동적 배열(메모리를 자동으로 늘려준다.)
    - 기본 데이터
    - 클래스
    - 포인터

2. 그 안에 저장된 모든 요소들이 연속된 메모리 공간에 위치
3. 요소 수가 증가함에 따라 자동으로 메모리를 관리해 줌
4. 어떤 요소에도 임의로 접근이 가능하다.

vector 변수 만드는 법1
std:vector<<type>><name>;
std::vector<int>scores;

vector 변수 만드는 법2
    std::vector<type><name>(const vector& x);
x라는 vector와 같은 크기(size)및 데이터를 갖는 vector르 생성한다.
    std::vector<int>scores1(socres); // scores의 사본

vector 변수를 만드는 법3
    std::vector<<type>><name>(<size>);
크기(size)를 지정하여 vector를 생성한다. (모든 요소의 값은 0)
    std::vector<int>scores(10);

-push_back();
제일 마지막에 있는 요소 제거하기
    scores.pop_back();

- 용량과 크기
vector에 할당된 요소 공간 수
    scores.capacity();
vector에 실제로 들어있는 요소 수
    scores.size();

-vector의 용량 늘리기
    reserve(<size>);
vector의 용량을 늘린다.
용량이 증가해야하면 새로운 저장 공간을 재할당하고 
기존 요소들을 모두 새 공간으로 복사
    scores.reserve(10);
불필요한 재할당을 막기 위해 vector를 생성한 직후에 이 함수를 호출하자.

-> vectorman.cpp 예시 2

- 요소하나에 접근하기1
    operator[(size_tn)]; 지정된 위치 n의 요소를 참조로 반환한다.

    scores[i] = 3;
    std::cout<<names[i]>>"";
    std::cout<<myCats[i].GetScore()<<"";

모든요소 출력하기 1

std::cout << "Current capacity : " << scores.capacity() << std::endl;
for (size_t i = 0;  i<scores.size(); i++){
    std::cout << "value : " << scores[i] <<" ";
}
